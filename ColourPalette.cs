//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class ColourPalette : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ColourPalette(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ColourPalette obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ColourPalette() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_ColourPalette(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


  public DrawColour this[int key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(int key, out DrawColour value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(DrawColour);
    return false;
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get { 
      return false; 
    }
  }

  public global::System.Collections.Generic.ICollection<int> Keys {
    get {
      global::System.Collections.Generic.ICollection<int> keys = new global::System.Collections.Generic.List<int>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<DrawColour> Values {
    get {
      global::System.Collections.Generic.ICollection<DrawColour> vals = new global::System.Collections.Generic.List<DrawColour>();
      foreach (global::System.Collections.Generic.KeyValuePair<int, DrawColour> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }
  
  public void Add(global::System.Collections.Generic.KeyValuePair<int, DrawColour> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<int, DrawColour> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<int, DrawColour> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<int, DrawColour>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<int, DrawColour>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<int> keyList = new global::System.Collections.Generic.List<int>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      int currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<int, DrawColour>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  public ColourPalette() : this(RDKFuncsPINVOKE.new_ColourPalette__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourPalette(SWIGTYPE_p_std__mapT_int_boost__tupleT_float_float_float_t_std__lessT_int_t_t other) : this(RDKFuncsPINVOKE.new_ColourPalette__SWIG_1(SWIGTYPE_p_std__mapT_int_boost__tupleT_float_float_float_t_std__lessT_int_t_t.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  private SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__size_type size() {
    SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__size_type ret = new SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__size_type(RDKFuncsPINVOKE.ColourPalette_size(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool empty() {
    bool ret = RDKFuncsPINVOKE.ColourPalette_empty(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Clear() {
    RDKFuncsPINVOKE.ColourPalette_Clear(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  private SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__mapped_type getitem(SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type key) {
    SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__mapped_type ret = new SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__mapped_type(RDKFuncsPINVOKE.ColourPalette_getitem(swigCPtr, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type.getCPtr(key)), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type key, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__mapped_type x) {
    RDKFuncsPINVOKE.ColourPalette_setitem(swigCPtr, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type.getCPtr(key), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__mapped_type.getCPtr(x));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey(SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type key) {
    bool ret = RDKFuncsPINVOKE.ColourPalette_ContainsKey(swigCPtr, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type.getCPtr(key));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type key, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__mapped_type val) {
    RDKFuncsPINVOKE.ColourPalette_Add(swigCPtr, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type.getCPtr(key), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__mapped_type.getCPtr(val));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type key) {
    bool ret = RDKFuncsPINVOKE.ColourPalette_Remove(swigCPtr, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type.getCPtr(key));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = RDKFuncsPINVOKE.ColourPalette_create_iterator_begin(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type get_next_key(global::System.IntPtr swigiterator) {
    SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type ret = new SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t__key_type(RDKFuncsPINVOKE.ColourPalette_get_next_key(swigCPtr, swigiterator), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    RDKFuncsPINVOKE.ColourPalette_destroy_iterator(swigCPtr, swigiterator);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
