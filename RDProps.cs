//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Reflection;

namespace GraphMolWrap {

  public static class RDKit
  {
    public static void  Initialize()
    {
      var path = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
      path = Path.Combine(path, IntPtr.Size == 8 ? "x64" : "x86");
      bool ok = SetDllDirectory(path);
      if (!ok) throw new System.ComponentModel.Win32Exception();
    }
    
    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern bool SetDllDirectory(string path);
  }
    
public class RDProps : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal RDProps(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RDProps obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RDProps() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          RDKFuncsPINVOKE.delete_RDProps(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public RDProps() : this(RDKFuncsPINVOKE.new_RDProps__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public RDProps(RDProps rhs) : this(RDKFuncsPINVOKE.new_RDProps__SWIG_1(RDProps.getCPtr(rhs)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    RDKFuncsPINVOKE.RDProps_clear(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Dict getDict() {
    Dict ret = new Dict(RDKFuncsPINVOKE.RDProps_getDict__SWIG_0(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Str_Vect getPropList(bool includePrivate, bool includeComputed) {
    Str_Vect ret = new Str_Vect(RDKFuncsPINVOKE.RDProps_getPropList__SWIG_0(swigCPtr, includePrivate, includeComputed), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Str_Vect getPropList(bool includePrivate) {
    Str_Vect ret = new Str_Vect(RDKFuncsPINVOKE.RDProps_getPropList__SWIG_1(swigCPtr, includePrivate), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Str_Vect getPropList() {
    Str_Vect ret = new Str_Vect(RDKFuncsPINVOKE.RDProps_getPropList__SWIG_2(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasProp(string key) {
    bool ret = RDKFuncsPINVOKE.RDProps_hasProp(swigCPtr, key);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearProp(string key) {
    RDKFuncsPINVOKE.RDProps_clearProp(swigCPtr, key);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearComputedProps() {
    RDKFuncsPINVOKE.RDProps_clearComputedProps(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateProps(RDProps source, bool preserveExisting) {
    RDKFuncsPINVOKE.RDProps_updateProps__SWIG_0(swigCPtr, RDProps.getCPtr(source), preserveExisting);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateProps(RDProps source) {
    RDKFuncsPINVOKE.RDProps_updateProps__SWIG_1(swigCPtr, RDProps.getCPtr(source));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setProp(string key, string val, bool computed) {
    RDKFuncsPINVOKE.RDProps_setProp__SWIG_2(swigCPtr, key, val, computed);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setProp(string key, string val) {
    RDKFuncsPINVOKE.RDProps_setProp__SWIG_3(swigCPtr, key, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
